# -*- coding: utf-8 -*-
"""face_detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V58bYH27pgfAgoVhCmExqpLoij5g5p6m
"""

import dlib
import cv2
from IPython.display import clear_output, Image
import base64
from google.colab.patches import cv2_imshow
import imutils
import numpy as np
detector = dlib.cnn_face_detection_model_v1('/content/drive/MyDrive/face and audio/mmod_human_face_detector.dat')

def arrayShow (imageArray):
    ret, png = cv2.imencode('.png', imageArray)
    encoded = base64.b64encode(png)
    return Image(data=encoded.decode('ascii'))

def convert_to_bbox(image, rect):

	# bounding box
	startX = rect.left()
	startY = rect.top()
	endX = rect.right()
	endY = rect.bottom()

	# dimensions of the image
	startX = max(0, startX)
	startY = max(0, startY)
	endX = min(endX, image.shape[1])
	endY = min(endY, image.shape[0])
	# compute the width and height of the bounding box
	w = endX - startX
	h = endY - startY
	# return our bounding box coordinates
	return (startX, startY, w, h)

def make_480p():
    cap.set(3, 640)
    cap.set(4, 480)

def rescale_frame(frame, percent=75):
    width = int(frame.shape[1] * percent/ 100)
    height = int(frame.shape[0] * percent/ 100)
    dim = (width, height)
    return cv2.resize(frame, dim, interpolation =cv2.INTER_AREA)


cap = cv2.VideoCapture("/content/drive/MyDrive/face and audio/video2.mp4")
count = 0
face_dict = []
print( cap.isOpened() )
while cap.isOpened():
    _, frame = cap.read()
    frame= rescale_frame(frame, percent=50)
    image = imutils.resize(frame, width=600)
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    results = detector(gray)
    faces = [convert_to_bbox(image, r.rect) for r in results]
    for (x,y, w, h) in faces:
        count+=1
        cv2.rectangle(frame, pt1 = (x,y),pt2 = (x+w, y+h), color = (255,0,0),thickness =  2)
        roi_gray = gray[y:y+h,x:x+w]
        roi_color = frame[y:y+h, x:x+w]


    cv2.imshow("window2", frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()



